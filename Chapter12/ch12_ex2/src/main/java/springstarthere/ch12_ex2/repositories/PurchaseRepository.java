package springstarthere.ch12_ex2.repositories;

import java.util.List;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import springstarthere.ch12_ex2.model.Purchase;

@Repository
public class PurchaseRepository {

    // instance variable
    private final JdbcTemplate jdbc;

    // constructor
    public PurchaseRepository (JdbcTemplate jdbc) {
        this.jdbc = jdbc;
    }

    // This method takes a Purchase object as a parameter and stores it in the database.
    public void storePurchase (Purchase purchase) {
        
        // SQL query to insert a new purchase into the database. The NULL indicates that the ID will be auto-generated by the database.
        String sql = "INSERT INTO purchase (product, price) VALUES (?, ?)";

        // executes the SQL query using the JdbcTemplate's update method, passing the product and price values from the Purchase object.
        this.jdbc.update(sql, purchase.getProduct(), purchase.getPrice());

        System.out.println("Inserting Purchase record product name " + purchase.getProduct() + " succcessfully");

    }

    // This method retrieves all purchases from the database and returns them as a list of Purchase objects.
    public List<Purchase> findAllPurchases() {

        String sql = "SELECT * FROM purchase";

        // LAMBDA EXPESSION
        RowMapper<Purchase> purchaseRowMapper = (r, i) -> {
        // defines a RowMapper, which maps each row of the result set to a Purchase object.

            // Creates a new Purchase object for each row.
            Purchase rowObject = new Purchase();

            // set the fields of the Purchase object using the values from the result set.
            rowObject.setID(r.getInt("id"));
            rowObject.setProduct(r.getString("product")); // fetches the value from the product column of the current row in the result set and assigns it to the product field of the Purchase object (rowObject)            
            rowObject.setPrice(r.getBigDecimal("price"));

            return rowObject;

        };

        // Executes the SQL query and maps each row to a Purchase object using the RowMapper, returning the list of purchases.
        List<Purchase> purchases = this.jdbc.query(sql, purchaseRowMapper);

        System.out.println("Returning Purchase from Database");
        
        return purchases;
        //return this.jdbc.query(sql, purchaseRowMapper);

    }

    /** r: This represents the current ResultSet row being processed.
     * ResultSet is a table of data representing a database result set, which is obtained by executing a SQL query. 
     * getString("product"): This method call retrieves the value of the product column from the current row of the ResultSet as a String. 
     * The column name "product" is passed as an argument to getString() to specify which column's value to retrieve
     * rowObject.setProduct(...): This calls the setProduct method on the rowObject (which is an instance of the Purchase class)
     * and sets the product field with the value retrieved from the ResultSet.
     */

}